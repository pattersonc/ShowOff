<?xml version="1.0" encoding="utf-8"?>
<report version="1.0">
  <metadata>
    <definitions>Mono 2.4 (Revised)</definitions>
    <momaversion>2.0.0.0</momaversion>
    <date>2010-04-18 12:36:54Z</date>
    <name />
    <email />
    <homepage />
    <organization />
    <comments />
    <apptype />
  </metadata>
  <assemblies>
    <assembly name="Antlr3.Runtime.dll" version="3.1.0.39271" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Castle.Core.dll" version="1.1.0.0" runtime="2.0" todo="2" niex="1" miss="0" pinv="0">
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>bool SourceExists(string, string)</method>
        <raw>System.Boolean System.Diagnostics.EventLog::SourceExists(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>void CreateEventSource(EventSourceCreationData)</method>
        <raw>System.Void System.Diagnostics.EventLog::CreateEventSource(System.Diagnostics.EventSourceCreationData)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="niex">
        <class>SlimReaderWriterLock</class>
        <caller>void .ctor()</caller>
        <method>void .ctor(LockRecursionPolicy)</method>
        <raw>System.Void System.Threading.ReaderWriterLockSlim::.ctor(System.Threading.LockRecursionPolicy)</raw>
      </issue>
    </assembly>
    <assembly name="Castle.DynamicProxy2.dll" version="2.1.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="FluentNHibernate.dll" version="1.0.0.0" runtime="2.0" todo="2" niex="1" miss="0" pinv="0">
      <issue type="todo">
        <class>PersistenceModel</class>
        <caller>Assembly FindTheCallingAssembly()</caller>
        <method>void .ctor(Thread, bool)</method>
        <raw>System.Void System.Diagnostics.StackTrace::.ctor(System.Threading.Thread,System.Boolean)</raw>
        <data>Not possible to create StackTraces from other threads</data>
      </issue>
      <issue type="todo">
        <class>ConnectionStringBuilder</class>
        <caller>ConnectionStringBuilder FromConnectionStringWithKey(string)</caller>
        <method>ConnectionStringSettingsCollection get_ConnectionStrings()</method>
        <raw>System.Configuration.ConnectionStringSettingsCollection System.Configuration.ConfigurationManager::get_ConnectionStrings()</raw>
        <data />
      </issue>
      <issue type="niex">
        <class>PersistenceModel</class>
        <caller>Assembly FindTheCallingAssembly()</caller>
        <method>void .ctor(Thread, bool)</method>
        <raw>System.Void System.Diagnostics.StackTrace::.ctor(System.Threading.Thread,System.Boolean)</raw>
      </issue>
    </assembly>
    <assembly name="Iesi.Collections.dll" version="1.0.1.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="log4net.dll" version="1.2.10.0" runtime="2.0" todo="6" niex="0" miss="0" pinv="17">
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>string LogNameFromSourceName(string, string)</method>
        <raw>System.String System.Diagnostics.EventLog::LogNameFromSourceName(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>void DeleteEventSource(string, string)</method>
        <raw>System.Void System.Diagnostics.EventLog::DeleteEventSource(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>string LogNameFromSourceName(string, string)</method>
        <raw>System.String System.Diagnostics.EventLog::LogNameFromSourceName(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>string LogNameFromSourceName(string, string)</method>
        <raw>System.String System.Diagnostics.EventLog::LogNameFromSourceName(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void CreateEventSource(string, string, string)</caller>
        <method>void CreateEventSource(EventSourceCreationData)</method>
        <raw>System.Void System.Diagnostics.EventLog::CreateEventSource(System.Diagnostics.EventSourceCreationData)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>XmlConfigurator</class>
        <caller>void Configure(ILoggerRepository, Uri)</caller>
        <method>ICredentials get_DefaultCredentials()</method>
        <raw>System.Net.ICredentials System.Net.CredentialCache::get_DefaultCredentials()</raw>
        <data>Need EnvironmentPermission implementation first</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>IntPtr GetStdHandle(uint)</method>
        <raw>System.IntPtr log4net.Appender.ColoredConsoleAppender::GetStdHandle(System.UInt32)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>IntPtr GetStdHandle(uint)</method>
        <raw>System.IntPtr log4net.Appender.ColoredConsoleAppender::GetStdHandle(System.UInt32)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>bool GetConsoleScreenBufferInfo(IntPtr, ColoredConsoleAppender/CONSOLE_SCREEN_BUFFER_INFO&amp;)</method>
        <raw>System.Boolean log4net.Appender.ColoredConsoleAppender::GetConsoleScreenBufferInfo(System.IntPtr,log4net.Appender.ColoredConsoleAppender/CONSOLE_SCREEN_BUFFER_INFO&amp;)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>bool SetConsoleTextAttribute(IntPtr, UInt16)</method>
        <raw>System.Boolean log4net.Appender.ColoredConsoleAppender::SetConsoleTextAttribute(System.IntPtr,System.UInt16)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>bool SetConsoleTextAttribute(IntPtr, UInt16)</method>
        <raw>System.Boolean log4net.Appender.ColoredConsoleAppender::SetConsoleTextAttribute(System.IntPtr,System.UInt16)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>int GetConsoleOutputCP()</method>
        <raw>System.Int32 log4net.Appender.ColoredConsoleAppender::GetConsoleOutputCP()</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>LocalSyslogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>void openlog(IntPtr, int, LocalSyslogAppender/SyslogFacility)</method>
        <raw>System.Void log4net.Appender.LocalSyslogAppender::openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender/SyslogFacility)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>LocalSyslogAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>void syslog(int, string, string)</method>
        <raw>System.Void log4net.Appender.LocalSyslogAppender::syslog(System.Int32,System.String,System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>LocalSyslogAppender</class>
        <caller>void OnClose()</caller>
        <method>void closelog()</method>
        <raw>System.Void log4net.Appender.LocalSyslogAppender::closelog()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>NetSendAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>int NetMessageBufferSend(string, string, string, string, int)</method>
        <raw>System.Int32 log4net.Appender.NetSendAppender::NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)</raw>
        <data>netapi32.dll</data>
      </issue>
      <issue type="pinv">
        <class>OutputDebugStringAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>void OutputDebugString(string)</method>
        <raw>System.Void log4net.Appender.OutputDebugStringAppender::OutputDebugString(System.String)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>NativeError</class>
        <caller>string GetErrorMessage(int)</caller>
        <method>int FormatMessage(int, IntPtr&amp;, int, int, String&amp;, int, IntPtr)</method>
        <raw>System.Int32 log4net.Util.NativeError::FormatMessage(System.Int32,System.IntPtr&amp;,System.Int32,System.Int32,System.String&amp;,System.Int32,System.IntPtr)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool LogonUser(string, string, string, int, int, IntPtr&amp;)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr&amp;)</raw>
        <data>advapi32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool DuplicateToken(IntPtr, int, IntPtr&amp;)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::DuplicateToken(System.IntPtr,System.Int32,System.IntPtr&amp;)</raw>
        <data>advapi32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool CloseHandle(IntPtr)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::CloseHandle(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool CloseHandle(IntPtr)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::CloseHandle(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool CloseHandle(IntPtr)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::CloseHandle(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
    </assembly>
    <assembly name="Moq.dll" version="3.1.416.3" runtime="2.0" todo="2" niex="1" miss="0" pinv="0">
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>bool SourceExists(string, string)</method>
        <raw>System.Boolean System.Diagnostics.EventLog::SourceExists(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>void CreateEventSource(EventSourceCreationData)</method>
        <raw>System.Void System.Diagnostics.EventLog::CreateEventSource(System.Diagnostics.EventSourceCreationData)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="niex">
        <class>SlimReaderWriterLock</class>
        <caller>void .ctor()</caller>
        <method>void .ctor(LockRecursionPolicy)</method>
        <raw>System.Void System.Threading.ReaderWriterLockSlim::.ctor(System.Threading.LockRecursionPolicy)</raw>
      </issue>
    </assembly>
    <assembly name="NHibernate.ByteCode.Castle.dll" version="2.1.0.3001" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="NHibernate.dll" version="2.1.0.3001" runtime="2.0" todo="7" niex="16" miss="0" pinv="0">
      <issue type="todo">
        <class>EmitUtil</class>
        <caller>void EmitCreateDelegateInstance(ILGenerator, Type, MethodInfo)</caller>
        <method>void EmitCall(OpCode, MethodInfo, Type[])</method>
        <raw>System.Void System.Reflection.Emit.ILGenerator::EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])</raw>
        <data>vararg methods are not supported</data>
      </issue>
      <issue type="todo">
        <class>ConnectionProvider</class>
        <caller>string GetNamedConnectionString(String, String&gt;)</caller>
        <method>ConnectionStringSettingsCollection get_ConnectionStrings()</method>
        <raw>System.Configuration.ConnectionStringSettingsCollection System.Configuration.ConfigurationManager::get_ConnectionStrings()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>BasicPropertyAccessor/BasicGetter</class>
        <caller>void Emit(ILGenerator)</caller>
        <method>void EmitCall(OpCode, MethodInfo, Type[])</method>
        <raw>System.Void System.Reflection.Emit.ILGenerator::EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])</raw>
        <data>vararg methods are not supported</data>
      </issue>
      <issue type="todo">
        <class>BasicPropertyAccessor/BasicSetter</class>
        <caller>void Emit(ILGenerator)</caller>
        <method>void EmitCall(OpCode, MethodInfo, Type[])</method>
        <raw>System.Void System.Reflection.Emit.ILGenerator::EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])</raw>
        <data>vararg methods are not supported</data>
      </issue>
      <issue type="todo">
        <class>AdoNetWithDistrubtedTransactionFactory</class>
        <caller>void EnlistInDistributedTransactionIfNeeded(ISessionImplementor)</caller>
        <method>Enlistment EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)</method>
        <raw>System.Transactions.Enlistment System.Transactions.Transaction::EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)</raw>
        <data>EnlistmentOptions being ignored</data>
      </issue>
      <issue type="todo">
        <class>AdoNetWithDistrubtedTransactionFactory/DistributedTransactionContext</class>
        <caller>void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)</caller>
        <method>void Prepared()</method>
        <raw>System.Void System.Transactions.PreparingEnlistment::Prepared()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>AdoNetWithDistrubtedTransactionFactory/DistributedTransactionContext</class>
        <caller>void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)</caller>
        <method>void ForceRollback(Exception)</method>
        <raw>System.Void System.Transactions.PreparingEnlistment::ForceRollback(System.Exception)</raw>
        <data />
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetTables(string, string, string, String[])</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetIndexInfo(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetIndexColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetForeignKeys(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetTables(string, string, string, String[])</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetIndexColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetIndexInfo(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetForeignKeys(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetTables(string, string, string, String[])</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetIndexInfo(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetIndexColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetForeignKeys(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AdoNetWithDistrubtedTransactionFactory/&lt;&gt;c__DisplayClass1</class>
        <caller>void &lt;EnlistInDistributedTransactionIfNeeded&gt;b__0(Object, TransactionEventArgs)</caller>
        <method>Transaction get_Transaction()</method>
        <raw>System.Transactions.Transaction System.Transactions.TransactionEventArgs::get_Transaction()</raw>
      </issue>
    </assembly>
    <assembly name="ShowOff.Core.dll" version="0.1.0.0" runtime="2.0" todo="2" niex="0" miss="0" pinv="0">
      <issue type="todo">
        <class>SessionFactoryFactory</class>
        <caller>string get_ConnectionString()</caller>
        <method>ConnectionStringSettingsCollection get_ConnectionStrings()</method>
        <raw>System.Configuration.ConnectionStringSettingsCollection System.Configuration.ConfigurationManager::get_ConnectionStrings()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>SetupHelper</class>
        <caller>void ExecuteSqlScript(string)</caller>
        <method>ConnectionStringSettingsCollection get_ConnectionStrings()</method>
        <raw>System.Configuration.ConnectionStringSettingsCollection System.Configuration.ConfigurationManager::get_ConnectionStrings()</raw>
        <data />
      </issue>
    </assembly>
    <assembly name="ShowOff.dll" version="0.1.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="StructureMap.dll" version="2.6.1.0" runtime="2.0" todo="1" niex="0" miss="0" pinv="0">
      <issue type="todo">
        <class>Doctor</class>
        <caller>DoctorReport RunReport()</caller>
        <method>AppDomain CreateDomain(string, Evidence, AppDomainSetup)</method>
        <raw>System.AppDomain System.AppDomain::CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)</raw>
        <data>Currently it does not allow the setup in the other domain</data>
      </issue>
    </assembly>
    <assembly name="System.Web.Abstractions.dll" version="3.5.0.0" runtime="2.0" todo="6" niex="6" miss="11" pinv="0">
      <issue type="todo">
        <class>HttpResponseWrapper</class>
        <caller>void AddCacheItemDependency(string)</caller>
        <method>void AddCacheItemDependency(string)</method>
        <raw>System.Void System.Web.HttpResponse::AddCacheItemDependency(System.String)</raw>
        <data>Currently does nothing</data>
      </issue>
      <issue type="todo">
        <class>HttpResponseWrapper</class>
        <caller>void AddCacheItemDependencies(ArrayList)</caller>
        <method>void AddCacheItemDependencies(ArrayList)</method>
        <raw>System.Void System.Web.HttpResponse::AddCacheItemDependencies(System.Collections.ArrayList)</raw>
        <data>Currently does nothing</data>
      </issue>
      <issue type="todo">
        <class>HttpResponseWrapper</class>
        <caller>void AddCacheItemDependencies(String[])</caller>
        <method>void AddCacheItemDependencies(String[])</method>
        <raw>System.Void System.Web.HttpResponse::AddCacheItemDependencies(System.String[])</raw>
        <data>Not implemented</data>
      </issue>
      <issue type="todo">
        <class>HttpResponseWrapper</class>
        <caller>void AddCacheDependency(CacheDependency[])</caller>
        <method>void AddCacheDependency(CacheDependency[])</method>
        <raw>System.Void System.Web.HttpResponse::AddCacheDependency(System.Web.Caching.CacheDependency[])</raw>
        <data>Not implemented</data>
      </issue>
      <issue type="todo">
        <class>HttpResponseWrapper</class>
        <caller>void WriteSubstitution(HttpResponseSubstitutionCallback)</caller>
        <method>void WriteSubstitution(HttpResponseSubstitutionCallback)</method>
        <raw>System.Void System.Web.HttpResponse::WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)</raw>
        <data>Not implemented</data>
      </issue>
      <issue type="todo">
        <class>HttpStaticObjectsCollectionWrapper</class>
        <caller>bool get_NeverAccessed()</caller>
        <method>bool get_NeverAccessed()</method>
        <raw>System.Boolean System.Web.HttpStaticObjectsCollection::get_NeverAccessed()</raw>
        <data>Not implemented</data>
      </issue>
      <issue type="niex">
        <class>HttpBrowserCapabilitiesWrapper</class>
        <caller>void DisableOptimizedCacheKey()</caller>
        <method>void DisableOptimizedCacheKey()</method>
        <raw>System.Void System.Web.Configuration.HttpCapabilitiesBase::DisableOptimizedCacheKey()</raw>
      </issue>
      <issue type="niex">
        <class>HttpRequestWrapper</class>
        <caller>WindowsIdentity get_LogonUserIdentity()</caller>
        <method>WindowsIdentity get_LogonUserIdentity()</method>
        <raw>System.Security.Principal.WindowsIdentity System.Web.HttpRequest::get_LogonUserIdentity()</raw>
      </issue>
      <issue type="niex">
        <class>HttpResponseWrapper</class>
        <caller>void AddCacheItemDependencies(String[])</caller>
        <method>void AddCacheItemDependencies(String[])</method>
        <raw>System.Void System.Web.HttpResponse::AddCacheItemDependencies(System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>HttpResponseWrapper</class>
        <caller>void AddCacheDependency(CacheDependency[])</caller>
        <method>void AddCacheDependency(CacheDependency[])</method>
        <raw>System.Void System.Web.HttpResponse::AddCacheDependency(System.Web.Caching.CacheDependency[])</raw>
      </issue>
      <issue type="niex">
        <class>HttpResponseWrapper</class>
        <caller>void WriteSubstitution(HttpResponseSubstitutionCallback)</caller>
        <method>void WriteSubstitution(HttpResponseSubstitutionCallback)</method>
        <raw>System.Void System.Web.HttpResponse::WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)</raw>
      </issue>
      <issue type="niex">
        <class>HttpStaticObjectsCollectionWrapper</class>
        <caller>bool get_NeverAccessed()</caller>
        <method>bool get_NeverAccessed()</method>
        <raw>System.Boolean System.Web.HttpStaticObjectsCollection::get_NeverAccessed()</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>NameValueCollection get_Headers()</caller>
        <method>NameValueCollection get_Headers()</method>
        <raw>System.Collections.Specialized.NameValueCollection System.Web.HttpResponse::get_Headers()</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>int get_SubStatusCode()</caller>
        <method>int get_SubStatusCode()</method>
        <raw>System.Int32 System.Web.HttpResponse::get_SubStatusCode()</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>void set_SubStatusCode(int)</caller>
        <method>void set_SubStatusCode(int)</method>
        <raw>System.Void System.Web.HttpResponse::set_SubStatusCode(System.Int32)</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>bool get_TrySkipIisCustomErrors()</caller>
        <method>bool get_TrySkipIisCustomErrors()</method>
        <raw>System.Boolean System.Web.HttpResponse::get_TrySkipIisCustomErrors()</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>void set_TrySkipIisCustomErrors(bool)</caller>
        <method>void set_TrySkipIisCustomErrors(bool)</method>
        <raw>System.Void System.Web.HttpResponse::set_TrySkipIisCustomErrors(System.Boolean)</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>void DisableKernelCache()</caller>
        <method>void DisableKernelCache()</method>
        <raw>System.Void System.Web.HttpResponse::DisableKernelCache()</raw>
      </issue>
      <issue type="miss">
        <class>HttpResponseWrapper</class>
        <caller>void TransmitFile(string, Int64, Int64)</caller>
        <method>void TransmitFile(string, Int64, Int64)</method>
        <raw>System.Void System.Web.HttpResponse::TransmitFile(System.String,System.Int64,System.Int64)</raw>
      </issue>
      <issue type="miss">
        <class>HttpServerUtilityWrapper</class>
        <caller>void TransferRequest(string)</caller>
        <method>void TransferRequest(string)</method>
        <raw>System.Void System.Web.HttpServerUtility::TransferRequest(System.String)</raw>
      </issue>
      <issue type="miss">
        <class>HttpServerUtilityWrapper</class>
        <caller>void TransferRequest(string, bool)</caller>
        <method>void TransferRequest(string, bool)</method>
        <raw>System.Void System.Web.HttpServerUtility::TransferRequest(System.String,System.Boolean)</raw>
      </issue>
      <issue type="miss">
        <class>HttpServerUtilityWrapper</class>
        <caller>void TransferRequest(string, bool, string, NameValueCollection)</caller>
        <method>void TransferRequest(string, bool, string, NameValueCollection)</method>
        <raw>System.Void System.Web.HttpServerUtility::TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)</raw>
      </issue>
      <issue type="miss">
        <class>HttpSessionStateWrapper</class>
        <caller>HttpCookieMode get_CookieMode()</caller>
        <method>HttpCookieMode get_CookieMode()</method>
        <raw>System.Web.HttpCookieMode System.Web.SessionState.HttpSessionState::get_CookieMode()</raw>
      </issue>
    </assembly>
    <assembly name="System.Web.Mvc.dll" version="2.0.0.0" runtime="2.0" todo="11" niex="9" miss="0" pinv="0">
      <issue type="todo">
        <class>ParameterInfoUtil</class>
        <caller>bool TryGetDefaultValue(ParameterInfo, Object&amp;)</caller>
        <method>Object get_RawDefaultValue()</method>
        <raw>System.Object System.Reflection.ParameterInfo::get_RawDefaultValue()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>TypeDescriptorHelper/_AssociatedMetadataTypeTypeDescriptionProvider</class>
        <caller>void .ctor(Type)</caller>
        <method>TypeDescriptionProvider GetProvider(Type)</method>
        <raw>System.ComponentModel.TypeDescriptionProvider System.ComponentModel.TypeDescriptor::GetProvider(System.Type)</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>LinqBinaryModelBinder</class>
        <caller>Object BindModel(ControllerContext, ModelBindingContext)</caller>
        <method>void .ctor(Byte[])</method>
        <raw>System.Void System.Data.Linq.Binary::.ctor(System.Byte[])</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>DefaultEditorTemplates</class>
        <caller>string HiddenInputTemplate(HtmlHelper)</caller>
        <method>bool op_Inequality(Binary, Binary)</method>
        <raw>System.Boolean System.Data.Linq.Binary::op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>DefaultEditorTemplates</class>
        <caller>string HiddenInputTemplate(HtmlHelper)</caller>
        <method>Byte[] ToArray()</method>
        <raw>System.Byte[] System.Data.Linq.Binary::ToArray()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>ViewTypeControlBuilder</class>
        <caller>void ProcessGeneratedCode(CodeCompileUnit, CodeTypeDeclaration, CodeTypeDeclaration, CodeMemberMethod, CodeMemberMethod)</caller>
        <method>void .ctor(string)</method>
        <raw>System.Void System.CodeDom.CodeTypeReference::.ctor(System.String)</raw>
        <data>We should parse basetype from right to left in 2.0 profile.</data>
      </issue>
      <issue type="todo">
        <class>ViewUserControlControlBuilder</class>
        <caller>void ProcessGeneratedCode(CodeCompileUnit, CodeTypeDeclaration, CodeTypeDeclaration, CodeMemberMethod, CodeMemberMethod)</caller>
        <method>void .ctor(string)</method>
        <raw>System.Void System.CodeDom.CodeTypeReference::.ctor(System.String)</raw>
        <data>We should parse basetype from right to left in 2.0 profile.</data>
      </issue>
      <issue type="todo">
        <class>ViewPageControlBuilder</class>
        <caller>void ProcessGeneratedCode(CodeCompileUnit, CodeTypeDeclaration, CodeTypeDeclaration, CodeMemberMethod, CodeMemberMethod)</caller>
        <method>void .ctor(string)</method>
        <raw>System.Void System.CodeDom.CodeTypeReference::.ctor(System.String)</raw>
        <data>We should parse basetype from right to left in 2.0 profile.</data>
      </issue>
      <issue type="todo">
        <class>InputExtensions</class>
        <caller>MvcHtmlString HiddenHelper(HtmlHelper, Object, bool, string, String, Object&gt;)</caller>
        <method>bool op_Inequality(Binary, Binary)</method>
        <raw>System.Boolean System.Data.Linq.Binary::op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>InputExtensions</class>
        <caller>MvcHtmlString HiddenHelper(HtmlHelper, Object, bool, string, String, Object&gt;)</caller>
        <method>Byte[] ToArray()</method>
        <raw>System.Byte[] System.Data.Linq.Binary::ToArray()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>OutputCacheAttribute/OutputCachedPage</class>
        <caller>void FrameworkInitialize()</caller>
        <method>void InitOutputCache(OutputCacheParameters)</method>
        <raw>System.Void System.Web.UI.Page::InitOutputCache(System.Web.UI.OutputCacheParameters)</raw>
        <data>The following properties of OutputCacheParameters are silently ignored: CacheProfile, NoStore, SqlDependency</data>
      </issue>
      <issue type="niex">
        <class>ParameterInfoUtil</class>
        <caller>bool TryGetDefaultValue(ParameterInfo, Object&amp;)</caller>
        <method>Object get_RawDefaultValue()</method>
        <raw>System.Object System.Reflection.ParameterInfo::get_RawDefaultValue()</raw>
      </issue>
      <issue type="niex">
        <class>TypeDescriptorHelper/_AssociatedMetadataTypeTypeDescriptionProvider</class>
        <caller>void .ctor(Type)</caller>
        <method>TypeDescriptionProvider GetProvider(Type)</method>
        <raw>System.ComponentModel.TypeDescriptionProvider System.ComponentModel.TypeDescriptor::GetProvider(System.Type)</raw>
      </issue>
      <issue type="niex">
        <class>LinqBinaryModelBinder</class>
        <caller>Object BindModel(ControllerContext, ModelBindingContext)</caller>
        <method>void .ctor(Byte[])</method>
        <raw>System.Void System.Data.Linq.Binary::.ctor(System.Byte[])</raw>
      </issue>
      <issue type="niex">
        <class>DefaultEditorTemplates</class>
        <caller>string HiddenInputTemplate(HtmlHelper)</caller>
        <method>bool op_Inequality(Binary, Binary)</method>
        <raw>System.Boolean System.Data.Linq.Binary::op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)</raw>
      </issue>
      <issue type="niex">
        <class>DefaultEditorTemplates</class>
        <caller>string HiddenInputTemplate(HtmlHelper)</caller>
        <method>Byte[] ToArray()</method>
        <raw>System.Byte[] System.Data.Linq.Binary::ToArray()</raw>
      </issue>
      <issue type="niex">
        <class>ViewUserControlControlBuilder</class>
        <caller>void .ctor()</caller>
        <method>void .ctor()</method>
        <raw>System.Void System.Web.UI.FileLevelUserControlBuilder::.ctor()</raw>
      </issue>
      <issue type="niex">
        <class>ViewPageControlBuilder</class>
        <caller>void .ctor()</caller>
        <method>void .ctor()</method>
        <raw>System.Void System.Web.UI.FileLevelPageControlBuilder::.ctor()</raw>
      </issue>
      <issue type="niex">
        <class>InputExtensions</class>
        <caller>MvcHtmlString HiddenHelper(HtmlHelper, Object, bool, string, String, Object&gt;)</caller>
        <method>bool op_Inequality(Binary, Binary)</method>
        <raw>System.Boolean System.Data.Linq.Binary::op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)</raw>
      </issue>
      <issue type="niex">
        <class>InputExtensions</class>
        <caller>MvcHtmlString HiddenHelper(HtmlHelper, Object, bool, string, String, Object&gt;)</caller>
        <method>Byte[] ToArray()</method>
        <raw>System.Byte[] System.Data.Linq.Binary::ToArray()</raw>
      </issue>
    </assembly>
    <assembly name="System.Web.Routing.dll" version="3.5.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
  </assemblies>
</report>